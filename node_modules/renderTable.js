/*
 * renderTable - converts SQLite row output into HTML tables
 *
 * usage: 
 *
 *	htmlString = require('renderTable').tableToHTML(rows);
 *
 *
 *
 */

var jaml = require('../js/jaml');

/*
 * Various Jaml templates to accepted the array structure created by
 * 	getHeader(), getData(), and tableToHTML()
 *
 *
 */
Jaml.register('tableheader', function(header){
	th(header.toString());
});

Jaml.register('tablerow', function(row){
	tr(Jaml.render('tablecell', row));
});

Jaml.register('tablecell', function(cell){
	td(cell.toString());
});

Jaml.register('table', function(input)	{
	table({border:1,cellpadding:1},
		tr(Jaml.render('tableheader', input.head)),
		Jaml.render('tablerow', input.rows)
	);
});


/*
 * getHeader(row)
 *	extracts from row, the SQLite output, and extracts column names
 *	returning them in a array of strings.
 *
 */

exports.getHeader = function(row) {
	var header = [];

	for (var key in row[0]){
		header[header.length] = key;
	}
	
	return header;
}

/*
 * getData(row)
 *	extracts from row, the SQLite output, and extracts data
 *	and creates an array from each row, returning an array of these 
 * 	arrays.
 *
 */

exports.getData = function(row){
	var data = [[]];
	var i,j;
	
	for (i = 0; i < row.length; i++){
		data[i] = [];
		for (j in row[i]){
			data[i][data[i].length] = row[i][j];
		}
	}

	return data;
}

/*
 * tableToHTML(row)
 * 	uses getHeader() and getData() to extract the data from
 *	the SQLite output and submits it to the Jaml templates
 *	to be rendered into an HTML table.
 */
exports.tableToHTML = function(row){
	if ((row == undefined) || (row.length <= 0)) { return ""; }
	return Jaml.render('table', {head:exports.getHeader(row), 
					rows: exports.getData(row)});
}
